# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export DISABLE_AUTO_UPDATE=true

# Path to your oh-my-zsh installation.
export ZSH="/home/icholy/.oh-my-zsh"

# Set name of the theme to load.
ZSH_THEME="robbyrussell"

# oh-my-zsh plugins.
plugins=(gitfast)

source $ZSH/oh-my-zsh.sh

# User configuration
export EDITOR=nvim

# Add ~/bin to PATH
export PATH=$PATH:/home/icholy/bin

# goose theme
export GOOSE_CLI_THEME=light

# Add Go bins to PATH
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$(go env GOPATH)/bin

# Add swift to PATH
export PATH=$PATH:/usr/local/swift/swift-5.5.2-RELEASE-ubuntu20.04/usr/bin

# Add lua-language-server
export PATH=$PATH:/usr/local/lua-language-server/bin

# Add pyenv to PATH
export PATH=$PATH:$HOME/.pyenv/bin

# Add tfenv
export PATH=$PATH:$HOME/.tfenv/bin

# Add luarocks
export PATH=$PATH:$HOME/.luarocks/bin

# Add bob
export PATH=$PATH:$HOME/.local/share/bob/nvim-bin

export PATH=$PATH:$HOME/fvm/default/bin

export PATH=$PATH:/opt/zig

# Node Version Manager
export NVM_DIR="$HOME/.nvm"
export PATH=$PATH:"$NVM_DIR/versions/node/$(cat $NVM_DIR/alias/default)/bin"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use

# Disable Husky Hooks
export HUSKY=0

# Use ripgrep config
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

alias clip="xclip -i -selection clipboard"
alias n='nautilus'
alias sagi='sudo apt install'
alias vim='nvim'
alias semgrepvim="jq -r '.results[] | [ .path, .start.line, .start.col ] | join(\":\")' > /tmp/errorfile; nvim -q /tmp/errorfile"
alias cal='ncal -b'
alias cwatch='watch -c unbuffer'
alias inpm='NODE_OPTIONS="--inspect-brk" npm'
alias inpx='NODE_OPTIONS="--inspect-brk" npx'
alias sc='sudo systemctl'
alias zn='nvim $(tv text)'

function cursor() {
    nohup /opt/cursor/Cursor-1.4.3-x86_64.AppImage --no-sandbox $@ > /dev/null 2>&1 & disown
}

function vg() {
    rg --vimgrep $@ > /tmp/vgfile
    nvim -q /tmp/vgfile
}

function cz() {
    local REPO_DIR=$(find ~/src -maxdepth 4 -type d -name ".git" | xargs dirname | fzf)
    if [ -n "$REPO_DIR" ]; then
        cd "$REPO_DIR"
    fi
}

function czz() {
    local REPO_DIR="/home/icholy/src/github.com/compassdigital/cdl"
    local SUB_DIR=$(git --git-dir $REPO_DIR/.git ls-files | grep "package\.json$\|go\.mod$\|cdktf\.json" | xargs dirname | fzf)
    if [ -n "$SUB_DIR" ]; then
        cd "$REPO_DIR/$SUB_DIR"
    fi
}

function czp() {
    local REPO_DIR="/home/icholy/src/github.com/compassdigital/cdl"
    local SUB_DIR=$(p4 list --dir $REPO_DIR | jq -r '.dir' | fzf)
    if [ -n "$SUB_DIR" ]; then
        cd "$REPO_DIR/$SUB_DIR"
    fi
}

function bump() {
    local INC_VERSION="${1:-minor}"
    echo "npm version --no-git-tag-version $INC_VERSION";
    local TAG_NAME="$(npm version --no-git-tag-version $INC_VERSION)"
    echo "git commit -am \"chore: version $TAG_NAME\""
    git commit -am "chore: version $TAG_NAME"
    echo "git tag $TAG_NAME"
    git tag "$TAG_NAME";
}

function scratch() {
    cd $(mktemp -p /tmp -d scratch.XXXXXX)
    echo "# Scratch Created: $(date)" > README.md
    if [[ "$1" == "go" ]]; then
        go mod init scratch
    elif [[ "$1" == "node" ]]; then
        npm init -y
        echo "node_modules" > .gitignore
    elif [[ "$1" == "sdk" ]]; then
        npm init -y
        npm i -D typescript
        npm i --save @compassdigital/sdk.typescript
        npx tsc --init
        echo "node_modules" > .gitignore
    fi
    git init
    git add --all .
    git commit -m "initial commit"
    smerge .
}

function lambdaenv() {
    if [ -z "$1" ]; then
        echo "Usage: lambdaenv <lambda-function-name>"
        return 1
    fi
    
    aws lambda get-function-configuration \
        --function-name "$1" \
        --query 'Environment.Variables' \
        | jq -r 'to_entries | .[] | "\(.key)=\(.value)"'
}

function fargateenv() {
    if [ -z "$1" ]; then
        echo "Usage: fargateenv <task-name>"
        return 1
    fi

    aws ecs describe-task-definition \
        --task-definition "$1" \
        --query 'taskDefinition.containerDefinitions[0].environment' \
        | jq -r '.[] | "\(.name)=\(.value)"'
}

function lambdarole() {
    if [ -z "$1" ]; then
        echo "Usage: lambdarole <lambda-function-name>"
        return 1
    fi
    local ROLE=$(
        aws lambda get-function-configuration \
            --function-name "$1" \
            --query 'Role' \
            --output text
    )
    aws sts assume-role \
        --role-arn $ROLE \
        --role-session-name "lambdarole-$1"
}

source /home/icholy/.secrets

# bun completions
[ -s "/home/icholy/.bun/_bun" ] && source "/home/icholy/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# grit
export GRIT_INSTALL="$HOME/.grit"
export PATH="$GRIT_INSTALL/bin:$PATH"
. "/home/icholy/.deno/env"
## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f /home/icholy/.dart-cli-completion/zsh-config.zsh ]] && . /home/icholy/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]

alias claude="/home/icholy/.claude/local/claude"
